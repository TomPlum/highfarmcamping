extends structure

block append body-content
    h2
        span.glyphicon.glyphicon-remove-circle
        |  Delete customer
    p
        | Delete an existing customer from the system.
    br

    #customer
        form#customerForm(onsubmit='test()')
            label Customer ID:
            br
            input(type='text', name='customer_id', value='1')
            br
            br
            | Or
            br
            br
            label First name:
            br
            input(type='text', name='firstname')
            br
            label Last name:
            br
            input(type='text', name='lastname')
            br
            br
            input(type='submit', value='Submit')

block append scripts
    script(type="text/javascript").

        let customer_to_be_deleted=1;

        function test()
        {
            getCustomerFromDB();

        }
        //Ajax call to the DB to get customer to be deleted
        function getCustomerFromDB() {
            $.ajax({
                type: 'POST',
                async: false,
                url: '/manage-customer/getCustomer',
                data: {
                    'ID': document.getElementById("customerForm").elements["customer_id"].value
                },
                success: function (data) {
                    //customer_to_be_deleted = JSON.stringify(data);
                    //document.getElementById('customer').innerHTML = "THIS IS :" + customer_to_be_deleted;
                    create_customer_output(data);
                },
                error: function () {
                    alert("I am sorry. Customer data cannot be accessed right now. Please contact IT support.");
                }
            });
        }
        let customer = [];
        function create_customer_output(data)
        {
            customer = data;
            customer = addressGenerator(customer);
            createTable();
        }
        function createTable() {

            const oTable = "<table class='table table-hover table-striped table-condensed'>";
            const cTable = "</table>";
            let tBody = "<tbody>";

            //Create Table Header
            let headers = "<thead>" +
                "<tr>" +
                "<th>ID</th>" +
                "<th>First Name</th>" +
                "<th>Surname</th>" +
                "<th>Date of Birth</th>" +
                "<th>E-Mail</th>" +
                "<th>Address</th>" +
                "<th>Home Phone</th>" +
                "<th>Mobile Phone</th>" +
                "</tr>" +
                "</thead>";

            //Create Table Body
            for (let i = 0; i < customer.length; i++) {
                tBody += "<tr>";
                tBody += "<td>" + customer[i].customer_id + "</td>";
                tBody += "<td>" + customer[i].first_name + "</td>";
                tBody += "<td>" + customer[i].last_name + "</td>";
                tBody += "<td>" + formatDate(customer[i].date_of_birth) + "</td>";
                tBody += "<td>" + customer[i].email_address + "</td>";
                tBody += "<td>" + customer[i].address_line_1 + "</td>";
                tBody += "<td>" + customer[i].home_phone_number + "</td>";
                tBody += "<td>" + customer[i].mobile_phone_number + "</td>";
                tBody += "</tr>";

            }
            tBody += "</tbody>";
            document.getElementById('customer').innerHTML=oTable + headers + tBody + cTable;
        }
        /**
         * Format the Date
         * @param Date in DB Format
         * @returns formatted String
         */
        function formatDate(dateDB) {
            let date = new Date(dateDB);
            let DD = date.getDate();
            if (DD < 10) {
                DD = "0" + DD;
            }
            let MM = date.getMonth();
            MM += 1;     //Need to do +1, donÂ´t know why yet
            if (MM < 10) {
                MM = "0" + MM;
            }
            const YYYY = date.getFullYear();
            return DD + "/" + MM + "/" + YYYY;
        }

        /**
         * Checks if a customer has more than one address and connects both address lines
         * @param Data from DB
         * @returns Data with all address in one field (address_line_1)
         */
        function addressGenerator(customerP) {
            let customers = customerP;
            let returnObject = [];
            let returnAddress = "";
            let y = 0;

            for (let i = 0; i < customers.length; i++) {

                if (i != customers.length - 1) {

                    if (customers[i].customer_id != customers[i + 1].customer_id) {
                        y = 0;
                        returnAddress += customers[i].address_line_1 + "<br>" + customers[i].address_line_2 + "<br><br>";
                        customers[i].address_line_1 = "";
                        customers[i].address_line_1 = returnAddress;
                        returnAddress = "";
                        returnObject.push(customers[i]);
                    } else {
                        y = 0;
                        while (customers[i].customer_id == customers[i + y].customer_id) {
                            returnAddress += customers[i + y].address_line_1 + "<br>" + customers[i + y].address_line_2 + "<br><br>";
                            y++;
                        }
                        customers[i].address_line_1 = "";
                        customers[i].address_line_1 = returnAddress;
                        returnAddress = "";
                        returnObject.push(customers[i]);
                        i += y - 1;
                    }
                } else {
                    returnAddress += customers[i].address_line_1 + "<br>" + customers[i].address_line_2 + "<br><br>";
                    customers[i].address_line_1 = "";
                    customers[i].address_line_1 = returnAddress;
                    returnAddress = "";
                    returnObject.push(customers[i]);
                }

            }
            return returnObject;
        }





